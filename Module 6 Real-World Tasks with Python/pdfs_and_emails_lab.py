#!/usr/bin/env python3


import json
import locale
import sys
import mimetypes, os, smtplib, reports, sys, emails
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.units import inch
import logging

def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_sales = {"total_sales": 0}
    max_revenue = {"revenue": 0}
    most_popular_car_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item
        car_year = item["car"]["car_year"]
        if car_year not in most_popular_car_year:
            most_popular_car_year[car_year] = 0
        most_popular_car_year[car_year] += item["total_sales"]

    # Find the year with the most sales
    most_popular_year = max(most_popular_car_year, key=most_popular_car_year.get)
    most_popular_year_sales = most_popular_car_year[most_popular_year]

    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(most_popular_year, most_popular_year_sales)
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        price = locale.atof(item["price"].strip("$"))
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])

    table_data = sorted(table_data[1:], key=lambda x: x[3], reverse=True)
    table_data.insert(0, ["ID", "Car", "Price", "Total Sales"])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    logging.basicConfig(level=logging.DEBUG)
    logging.debug("Starting main function")

    data = load_data("car_sales.json")
    summary = process_data(data)
    logging.debug("Data processed")

    report_pie = Pie(width=3*inch, height=3*inch)
    report_pie.data = []
    report_pie.labels = []
    for item in data:
        report_pie.data.append(item['total_sales'])
        report_pie.labels.append(format_car(item['car']))
    logging.debug("Pie chart data and labels set")

    # Set colors for the slices
    colors_list = [colors.blue, colors.green, colors.red, colors.yellow, colors.purple, colors.orange, colors.pink, colors.brown, colors.cyan, colors.magenta]
    for i, slice in enumerate(report_pie.slices):
        slice.fillColor = colors_list[i % len(colors_list)]
        slice.fontColor = colors.black
    logging.debug("Pie chart colors set")

    report_chart = Drawing()
    report_chart.add(report_pie)
    logging.debug("Pie chart added to drawing")

    report_content = "<br/>".join(summary) + "<br/><br/>"
    logging.debug("Report content created")

    # Create the PDF report
    report = SimpleDocTemplate("/tmp/cars.pdf")
    styles = getSampleStyleSheet()
    report_title = Paragraph("Sales summary for last month", styles["h1"])
    report_summary = Paragraph(report_content, styles["BodyText"])
    report_table = Table(data=cars_dict_to_table(data))
    report_elements = [report_title, Spacer(1, 0.2*inch), report_summary, Spacer(1, 0.2*inch), report_table, Spacer(1, 0.2*inch), report_chart]
    report.build(report_elements)
    logging.debug("PDF report created")

    sender = "automation@example.com"
    receiver = "student@example.com"
    subject = "Sales summary for last month"
    body = "\n".join(summary)
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    emails.send(message)
    logging.debug("Email sent")

if __name__ == "__main__":
    main(sys.argv)